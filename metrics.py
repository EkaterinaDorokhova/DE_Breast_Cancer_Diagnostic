# -*- coding: utf-8 -*-
"""metrics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PjfTzZMeDSswpmYJEDu9TUuOXhv0QeVU
"""

import pandas as pd
import argparse
import os
import logging
import joblib
import json
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split

def evaluate_model(x_path, y_path, model_path, output_dir):
    os.makedirs(output_dir, exist_ok=True)

    # Загрузка данных
    X = pd.read_csv(x_path)
    y = pd.read_csv(y_path).squeeze()

    # Деление на train и test
    _, X_test, _, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Загрузка модели
    model = joblib.load(model_path)

    # Предсказания
    y_pred = model.predict(X_test)

    # Метрики
    metrics = {
        "accuracy": accuracy_score(y_test, y_pred),
        "precision": precision_score(y_test, y_pred),
        "recall": recall_score(y_test, y_pred),
        "f1_score": f1_score(y_test, y_pred)
    }

    # Сохранение в JSON
    metrics_path = os.path.join(output_dir, "metrics.json")
    with open(metrics_path, "w") as f:
        json.dump(metrics, f, indent=4)

    logging.info(f"Метрики сохранены в: {metrics_path}")
    return metrics

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Оценка модели и сохранение метрик")
    parser.add_argument("--x", required=True, help="Путь к X_processed.csv")
    parser.add_argument("--y", required=True, help="Путь к y.csv")
    parser.add_argument("--model", required=True, help="Путь к model.pkl")
    parser.add_argument("--output", default="results", help="Папка для сохранения метрик")

    args = parser.parse_args()
    logging.basicConfig(level=logging.INFO)

    evaluate_model(args.x, args.y, args.model, args.output)