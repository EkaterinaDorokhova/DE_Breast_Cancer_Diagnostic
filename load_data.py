# -*- coding: utf-8 -*-
"""load_data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xcu0qjiUwGn0xJJxgEbuIhJwu-RZk5Eo
"""

import pandas as pd
import os
import argparse
import logging

# Названия колонок взяты из официального описания датасета (https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic))
column_names = [
    'id', 'diagnosis',
    'radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean',
    'compactness_mean', 'concavity_mean', 'concave_points_mean', 'symmetry_mean', 'fractal_dimension_mean',
    'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',
    'compactness_se', 'concavity_se', 'concave_points_se', 'symmetry_se', 'fractal_dimension_se',
    'radius_worst', 'texture_worst', 'perimeter_worst', 'area_worst', 'smoothness_worst',
    'compactness_worst', 'concavity_worst', 'concave_points_worst', 'symmetry_worst', 'fractal_dimension_worst'
]

def load_csv(file_path):
    try:
        df = pd.read_csv(file_path, header=None, names=column_names)
        logging.info(f"Датасет загружен: {file_path}")
        return df
    except Exception as e:
        logging.error(f"Ошибка при загрузке CSV: {e}")
        raise

def basic_eda(df, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    shape_info = f"Размерность: {df.shape}"
    nulls_info = df.isnull().sum().to_string()
    dtypes_info = df.dtypes.to_string()

    report = "\n".join([shape_info, "\nПропуски:\n", nulls_info, "\nТипы данных:\n", dtypes_info])

    report_path = os.path.join(output_dir, "eda_report.txt")
    with open(report_path, "w") as f:
        f.write(report)

    logging.info(f"EDA-отчёт сохранён в: {report_path}")
    return report_path

def save_copy(df, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    output_path = os.path.join(output_dir, "raw_data.csv")
    df.to_csv(output_path, index=False)
    logging.info(f"Копия датасета сохранена в: {output_path}")
    return output_path

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Load CSV and perform basic EDA")
    parser.add_argument("--input", required=True, help="Путь к CSV-файлу")
    parser.add_argument("--output", default="results", help="Папка для вывода отчёта")

    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    df = load_csv(args.input)
    basic_eda(df, args.output)
    save_copy(df, args.output)